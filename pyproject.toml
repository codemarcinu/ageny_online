[build-system]
requires = ["setuptools", "wheel", "poetry-core"]
build-backend = "setuptools.build_meta"

[tool.poetry]
name = "ageny-online"
version = "0.1.0"
description = "AI Assistant with external API providers (OpenAI, Anthropic, Cohere, Mistral AI, Pinecone, Azure Vision, Google Vision)"
authors = ["Marcin <marcin@example.com>"]
packages = [
    { include = "backend", from = "src" }
]

[tool.poetry.dependencies]
python = "^3.12"

# API Group
fastapi = "^0.115.0"
uvicorn = { extras = ["standard"], version = "^0.29.0" }
python-multipart = "^0.0.9"
slowapi = "^0.1.9"
httpx = "^0.27.0"
aiohttp = "^3.9.0"
pydantic = "^2.11.0"
email-validator = "^2.0.0"
pydantic-settings = "^2.0"
python-dotenv = "^1.0.0"

# External LLM Providers
openai = "^1.0.0"
anthropic = "^0.7.0"
cohere = "^4.0.0"

# Vector Stores
pinecone = "^4.1.0"
weaviate-client = "^3.25.0"

# OCR Providers
azure-cognitiveservices-vision-computervision = "^0.9.0"
google-cloud-vision = "^3.4.0"

# Database Group
aiosqlite = "^0.19.0"
greenlet = "^3.0.3"

# Monitoring and Observability Group
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.42b0"
opentelemetry-instrumentation-httpx = "^0.42b0"
prometheus-client = "^0.19.0"
prometheus-fastapi-instrumentator = "^6.1.0"

# Utilities
pytz = "^2024.1"
psutil = "^7.0.0"
structlog = "^24.1.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.41"}
dependency-injector = "^4.41.0"
redis = "^5.2.0"
pybreaker = "^1.3.0"
langdetect = "1.0.9"
aiofiles = "^24.1.0"
cryptography = "^41.0.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}

[tool.poetry.group.dev.dependencies]
mypy = "^1.16.1"
pytest = "^8.3.2"
pytest-cov = "^4.0"
pytest-asyncio = ">=0.23.0"
pytest-benchmark = "^4.0.0"
pre-commit = "^3.7.1"
black = "^25.0"
isort = "^5.10.1"
flake8 = "^6.0"
bandit = "^1.7.4"
safety = "^2.3.2"
ruff = "^0.5.5"
types-requests = "^2.31.0"
memory-profiler = "^0.61.0"
debugpy = "^1.8.14"
pylint = "^3.3.7"
types-aiofiles = "^24.1.0.20250606"
pytest-mock = "^3.14.1"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "--strict-markers --strict-config --cov=src --cov-report=html --cov-report=term-missing"
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.pytest-benchmark]
min_rounds = 5
max_time = 10.0
warmup = true

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["backend"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"] 